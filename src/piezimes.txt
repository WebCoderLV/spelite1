import { Component, computed, inject, signal } from '@angular/core';
import { Field, form, maxLength, minLength, required } from '@angular/forms/signals';
import { UserInterface } from '../models/user-interface';
import { UserService } from '../services/user-service';

@Component({
  selector: 'app-login',
  imports: [Field],
  templateUrl: './login.html',
  styleUrls: ['./login.css']
})
export class Login {

  userService = inject(UserService);

  // Dynamic array of users
  protected readonly users = signal<UserInterface[]>([
    {
      name: '',
      password: '',
    }
  ]);

  // Dynamic array of login forms based on users array
  protected readonly loginForms = computed(() => {
    return this.users().map((user, index) => {
      const userSignal = signal<UserInterface>(user);
      return form(userSignal, (p) => {
        required(p.name, { message: 'Name is required' });
        minLength(p.name, 3, { message: 'Name must be at least 3 characters' });
        maxLength(p.name, 25, { message: 'Name cannot exceed 25 characters' });

        required(p.password, { message: 'Password is required' });
        minLength(p.password, 4, { message: 'Password must be at least 4 characters' });
        maxLength(p.password, 50, { message: 'Password cannot exceed 50 characters' });
      });
    });
  });

  // Add a new login form
  addLoginForm() {
    this.users.update(users => [...users, { name: '', password: '' }]);
  }

  // Remove a login form at specific index
  removeLoginForm(index: number) {
    if (this.users().length > 1) {
      this.users.update(users => users.filter((_, i) => i !== index));
    }
  }

  // Update a specific user in the array
  updateUser(index: number, updatedUser: UserInterface) {
    this.users.update(users =>
      users.map((user, i) => i === index ? updatedUser : user)
    );
  }

  // Log in all valid forms
  onLogInAll() {
    const forms = this.loginForms();
    forms.forEach((form, index) => {
      if (form().valid()) {
        const user = this.users()[index];
        this.userService.logIn(user).subscribe({
          next: (response) => {
            this.updateUser(index, { ...user, id: response.body! });
            console.log("User " + JSON.stringify(user) + " Status: " + response.status);
          },
          error: (error) => {
            console.error('Error fetching user:', error);
          }
        });
      }
    });
  }

  // Log in a specific form by index
  onLogIn(index: number) {
    const forms = this.loginForms();
    const form = forms[index];
    if (form && form().valid()) {
      const user = this.users()[index];
      this.userService.logIn(user).subscribe({
        next: (response) => {
          this.updateUser(index, { ...user, id: response.body! });
          console.log("User " + JSON.stringify(user) + " Status: " + response.status);
        },
        error: (error) => {
          console.error('Error fetching user:', error);
        }
      });
    }
  }

}